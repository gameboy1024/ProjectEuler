# -*- coding: utf-8 -*-
'''
  Cyclical figurate numbers
  Problem 61
  Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are 
  all figurate (polygonal) numbers and are generated by the following formulae:

  Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
  Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
  Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
  Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
  Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
  Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
  The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
  interesting properties.

  The set is cyclic, in that the last two digits of each number is the first two 
  digits of the next number (including the last number with the first).
  Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and 
  pentagonal (P5,44=2882), is represented by a different number in the set.
  This is the only set of 4-digit numbers with this property.
  Find the sum of the only ordered set of six cyclic 4-digit numbers for which 
  each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and 
  octagonal, is represented by a different number in the set.

  Answer: 28684 Completed on Mon, 17 Nov 2014, 10:43
  https://projecteuler.net/problem=61
  
  @author Botu Sun
'''

from lib import math_utils as math

def generate_pn(l, f):
  last = 0
  i = 1
  while last < 1E4:
    last = f(i)
    if last > 999 and last < 10000:
      l.append(last)
    i += 1

lists = [[], [], [], [], [], []]
generate_pn(lists[0], lambda i: i * (i + 1) / 2)
generate_pn(lists[1], lambda i: i * i)
generate_pn(lists[2], lambda i: i * (3 * i - 1) / 2)
generate_pn(lists[3], lambda i: i * (2 * i - 1))
generate_pn(lists[4], lambda i: i * (5 * i - 3) / 2)
generate_pn(lists[5], lambda i: i * (3 * i - 2))
bitmap = [True] * 6

def recursion(prefix_0, lists, bitmap, suffix, total, numbers):
  for n in xrange(0, 6):
    # If this list is already taken, we continue.
    if not bitmap[n]:
      continue
    # Set bitmap.
    bitmap[n] = False
    for i in lists[n]:
      if i / 100 == suffix or n == 0:
        if n == 0:
          prefix_0 = i / 100
        if sum(bitmap) == 0:
          if i % 100 == prefix_0:
            total += i
            print total
            print numbers + ', ' + str(i)
            exit()
          break
        recursion(prefix_0, 
                  lists, bitmap, i % 100, total + i, numbers + ', ' + str(i))
    # Restore bitmap.
    bitmap[n] = True

recursion(None, lists, bitmap, None, 0, '')